import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Dialog, Transition } from '@headlessui/react';
import React, { Fragment } from 'react';
import clsx from 'clsx';
export const Modal = ({ children, initialState, padding = 'small', size = 'small', align = 'center', overlay = false, showBar = false, overflow = false, closeModal, closable = true, theme }) => {
    const cancelButtonRef = React.useRef(null);
    const [expanded, setExpanded] = React.useState(false);
    const modalStyle = clsx(`${theme} inline-block`, size === 'small' && 'w-full max-w-md', size === 'medium' && 'w-full max-w-2xl', size === 'large' && 'w-full max-w-4xl', size === 'fit' && 'w-fit', align === 'right' && 'mr-[20px]', expanded && 'max-w-full h-screen', !expanded && 'rounded-[20px] p-[4px]', `text-left align-middle transition-all transform shadow-xl`);
    const containerStyle = clsx(padding === 'small' && 'p-2', padding === 'medium' && 'p-4', padding === 'large' && 'p-[40px]');
    const barStyle = clsx(!expanded && 'rounded-tl-[16px] rounded-tr-[16px]', 'bg-neutral-100 w-full h-8 flex p-2');
    return (_jsx(_Fragment, { children: _jsx(Transition.Root, { show: initialState, as: Fragment, children: _jsx(Dialog, { as: "div", "auto-reopen": "true", className: "fixed inset-0 z-10 overflow-y-auto", initialFocus: cancelButtonRef, onClose: closable ? closeModal : () => closable, children: _jsxs("div", { className: `block items-end justify-end min-h-screen ${align === 'center' ? 'text-center' : 'text-right'}`, children: [_jsx(Transition.Child, { as: Fragment, enter: "ease-out duration-300", enterFrom: "opacity-0", enterTo: "opacity-100", leave: "ease-in duration-200", leaveFrom: "opacity-100", leaveTo: "opacity-0", children: _jsx("div", { className: "fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" }) }), _jsx("span", { className: "inline-block h-screen align-middle", "aria-hidden": "true" }), _jsx(Transition.Child, { as: Fragment, enter: "ease-out duration-300", enterFrom: "opacity-0 translate-y-40", enterTo: "opacity-100 translate-y-0", leave: "ease-in duration-200", leaveFrom: "opacity-100 translate-y-0", leaveTo: "opacity-0 -translate-y-40", children: _jsx(Dialog.Panel, { className: modalStyle, children: _jsxs("div", { className: `bg-background ${!expanded ? 'rounded-[16px]' : 'h-full'} ${!!overflow ? 'overflow-hidden' : ''}`, children: [showBar && (_jsx("div", { className: barStyle, children: _jsx("div", { className: "flex justify-between items-center", children: _jsxs("div", { className: "flex justify-start", children: [_jsx("button", { type: "button", className: "bg-red-400 text-red-400 rounded-full p-1 hover:text-red-100 hover:bg-red-500 focus:outline-none", onClick: closeModal, children: _jsx("span", { className: "sr-only", children: "Close" }) }), _jsx("button", { type: "button", className: "ml-2 bg-green-400 text-green-400 rounded-full p-1 hover:text-green-100 hover:bg-green-500 focus:outline-none", onClick: () => setExpanded(!expanded), children: _jsx("span", { className: "sr-only", children: "Close" }) })] }) }) })), _jsx("div", { className: containerStyle, children: _jsx("div", { className: padding === 'none' ? '' : 'mt-4', children: children }) })] }) }) })] }) }) }) }));
};
